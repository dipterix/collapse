// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// collapser_real_rcppparallel
SEXP collapser_real_rcppparallel(SEXP x, SEXP keep);
RcppExport SEXP _collapse_collapser_real_rcppparallel(SEXP xSEXP, SEXP keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type keep(keepSEXP);
    rcpp_result_gen = Rcpp::wrap(collapser_real_rcppparallel(x, keep));
    return rcpp_result_gen;
END_RCPP
}
// collapser_real_omp
SEXP collapser_real_omp(SEXP x, SEXP keep);
RcppExport SEXP _collapse_collapser_real_omp(SEXP xSEXP, SEXP keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type keep(keepSEXP);
    rcpp_result_gen = Rcpp::wrap(collapser_real_omp(x, keep));
    return rcpp_result_gen;
END_RCPP
}
// getThreads
int getThreads(bool max);
RcppExport SEXP _collapse_getThreads(SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(getThreads(max));
    return rcpp_result_gen;
END_RCPP
}
// setThreads
int setThreads(int n, int reset_after_fork);
RcppExport SEXP _collapse_setThreads(SEXP nSEXP, SEXP reset_after_forkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type reset_after_fork(reset_after_forkSEXP);
    rcpp_result_gen = Rcpp::wrap(setThreads(n, reset_after_fork));
    return rcpp_result_gen;
END_RCPP
}
// hasOpenMP
bool hasOpenMP();
RcppExport SEXP _collapse_hasOpenMP() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(hasOpenMP());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_collapse_collapser_real_rcppparallel", (DL_FUNC) &_collapse_collapser_real_rcppparallel, 2},
    {"_collapse_collapser_real_omp", (DL_FUNC) &_collapse_collapser_real_omp, 2},
    {"_collapse_getThreads", (DL_FUNC) &_collapse_getThreads, 1},
    {"_collapse_setThreads", (DL_FUNC) &_collapse_setThreads, 2},
    {"_collapse_hasOpenMP", (DL_FUNC) &_collapse_hasOpenMP, 0},
    {NULL, NULL, 0}
};

int detectForked(DllInfo *dll);
RcppExport void R_init_collapse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    detectForked(dll);
}
